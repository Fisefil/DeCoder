import os
import re

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, ContextTypes
)

from handlers.chat import chat_ressender, direct_message_handler
from handlers.menu import send_main_menu, button_handler, WAITING_FOR_NAME, main_menu_markup
from handlers.profile import receive_name
from tools.moderation import ban, unban, mute, unmute
from tools.storage import get_user, upsert_user, assign_codes, init_db

# --- –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /direct ---
WAITING_DIRECT_MESSAGE = 1001

init_db()


async def direct_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /direct <–∫–æ–¥1> <–∫–æ–¥2> ...")
        return ConversationHandler.END

    # –°–æ–±–∏—Ä–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∫–æ–¥—ã (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏)
    codes_str = " ".join(args)
    codes = [c.strip() for c in re.split(r"[,\s]+", codes_str) if c.strip()]

    if not codes:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–¥")
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ALL
    if len(codes) == 1 and codes[0].upper() == "ALL":
        from tools.storage import get_all_codes
        codes = get_all_codes

    context.user_data["direct_codes"] = codes
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {', '.join(codes)}:")
    return WAITING_DIRECT_MESSAGE


async def global_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(str(update.effective_user.id))
    if update.effective_chat.type in ("group", "supergroup") and context.user_data.get("hidden_mode"):
        return
    elif update.effective_chat.type in ("group", "supergroup"):
        await chat_ressender(update, context)
    elif user.get("is_banned"):
        await update.message.reply_text("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, "
                                        "–ø–æ–∫–∞ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–ø–ø–µ–ª—è—Ü–∏–∏ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ–ø–ª–∞–∫–∞—Ç—å.")
        return
    elif user.get("is_mutted"):
        await update.message.reply_text("–í—ã –±—ã–ª–∏ –∑–∞—Ç–∫–Ω—É—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, "
                                        "–ø–æ–∫–∞ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–ø–ø–µ–ª—è—Ü–∏–∏ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ–ø–ª–∞–∫–∞—Ç—å.")
        return
    elif context.user_data.get("chat_mode"):
        await chat_ressender(update, context)
    else:
        markup = main_menu_markup(context)
        await update.message.reply_text("–ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω!", reply_markup=markup)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (fallback)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup(context))
    return ConversationHandler.END


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.getenv("TELEGRAM_BOT_TOKEN")
if not token:
    raise RuntimeError("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_BOT_TOKEN")
app = ApplicationBuilder().token(token).build()


async def hidden(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(str(update.effective_user.id))
    if not user.get("name"):
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ –≤–∞—à–µ —Ñ–µ–π–∫–æ–≤–æ–µ –∏–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return
    if update.effective_chat.type == "private":
        return
    hidden_mode = context.user_data.get("hidden_mode", False)
    if hidden_mode:
        context.user_data["hidden_mode"] = False
        await update.message.reply_text("–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã –≤ –±–æ—Ç–µ.")
    elif not hidden_mode:
        context.user_data["hidden_mode"] = True
        await update.message.reply_text("–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç—ã –æ—Ç –±–æ—Ç–∞.")


# –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user = get_user(user_id)

    if not user:
        upsert_user(user_id)
        assign_codes()

    if not context.user_data.get("keyboard_shown"):
        context.user_data["keyboard_shown"] = True
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("/menu")]], resize_keyboard=True)
        await update.message.reply_text("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üëá", reply_markup=reply_markup)

    await send_main_menu(update, context)


# ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="set_name")],
    states={
        WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_user=True
)

# ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /direct
direct_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("direct", direct_command)],
    states={
        WAITING_DIRECT_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, direct_message_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_user=True
)

app.add_handler(CommandHandler(["menu", "start"], start))
app.add_handler(CommandHandler("hidden", hidden))
app.add_handler(CommandHandler("ban", ban))
app.add_handler(CommandHandler("unban", unban))
app.add_handler(CommandHandler("mute", mute))
app.add_handler(CommandHandler("unmute", unmute))
app.add_handler(conv_handler)
app.add_handler(direct_conv_handler)
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, global_message_handler))
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ (—É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ "set_name")
app.add_handler(
    CallbackQueryHandler(
        button_handler,
        pattern="^(hello|settings|get_name|back|run_chat|stop_chat)$"
    )
)

app.run_polling()
